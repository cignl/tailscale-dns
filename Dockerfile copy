
# Image that provides cross compilation tooling.
FROM --platform=$BUILDPLATFORM golang:1.23-alpine AS builder


# copy xx scripts to your build stage
#COPY --from=xx / /
RUN apk add file make git clang lld
#ARG TARGETPLATFORM
# setup required packages
#RUN set -x && \
#    xx-apk --no-cache add musl-dev gcc lld 

# setup the coredns build
ARG SRC=github.com/coredns/coredns
ARG PKG=github.com/coredns/coredns
ARG TAILSCALE_SRC=github.com/damomurf/coredns-tailscale
ARG TAG=v1.11.3
RUN git clone --depth=1 https://${SRC}.git $GOPATH/src/${PKG}
WORKDIR $GOPATH/src/${PKG}
RUN git fetch --all --tags --prune
RUN git checkout tags/${TAG} -b ${TAG}
COPY plugin.cfg $GOPATH/src/${PKG}/plugin.cfg
RUN go mod download
RUN go get ${TAILSCALE_SRC}

# cross-compilation setup
#ARG TARGETPLATFORM TARGETARCH
#RUN xx-go --wrap && \
#    GO_LDFLAGS="-linkmode=external -X ${PKG}/coremain.GitCommit=$(git rev-parse --short HEAD)" \
#    go-build-static.sh -gcflags=-trimpath=${GOPATH}/src -o bin/coredns .
#RUN go-assert-static.sh bin/*
#RUN xx-verify --static bin/*
#RUN if [ "${TARGETARCH}" = "amd64" ] || [ "${TARGETARCH}" = "arm64" ]; then \
#    	go-assert-boring.sh bin/*; \
#    fi

RUN make
RUN install coredns /usr/local/bin
RUN coredns --version
RUN coredns -plugins

#FROM ${GO_IMAGE} as strip_binary
##strip needs to run on TARGETPLATFORM, not BUILDPLATFORM
#COPY --from=coredns-builder /usr/local/bin/coredns /coredns
#RUN strip /coredns

#FROM bci as coredns
#COPY --from=strip_binary /coredns /coredns
ENTRYPOINT ["/coredns"]